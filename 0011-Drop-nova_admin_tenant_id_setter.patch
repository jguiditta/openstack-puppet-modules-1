From 28f2f4cff9b8f35511b3b15668b10cc32419c236 Mon Sep 17 00:00:00 2001
From: Lukas Bezdicka <lbezdick@redhat.com>
Date: Thu, 15 Oct 2015 14:58:28 +0200
Subject: [PATCH] Drop nova_admin_tenant_id_setter

Neutron now has two options nova_admin_tenant_id and nova_admin_tenant_name.
One can just simply specify name of the nova admin tenant instead of probing
the api to get tenant id.

Change-Id: I21dc10396e92906eab4651c318aa2ee62a8e03c7
---
 .../nova_admin_tenant_id_setter/ini_setting.rb     | 196 -------------------
 .../lib/puppet/type/nova_admin_tenant_id_setter.rb |  32 ----
 neutron/manifests/init.pp                          |   2 -
 neutron/manifests/keystone/auth.pp                 |   1 -
 neutron/manifests/server.pp                        |   1 -
 neutron/manifests/server/notifications.pp          |   9 +-
 .../classes/neutron_server_notifications_spec.rb   |   8 +-
 .../nova_admin_tenant_id_setter/neutron_spec.rb    | 212 ---------------------
 8 files changed, 3 insertions(+), 458 deletions(-)
 delete mode 100644 neutron/lib/puppet/provider/nova_admin_tenant_id_setter/ini_setting.rb
 delete mode 100644 neutron/lib/puppet/type/nova_admin_tenant_id_setter.rb
 delete mode 100644 neutron/spec/unit/provider/nova_admin_tenant_id_setter/neutron_spec.rb

diff --git a/neutron/lib/puppet/provider/nova_admin_tenant_id_setter/ini_setting.rb b/neutron/lib/puppet/provider/nova_admin_tenant_id_setter/ini_setting.rb
deleted file mode 100644
index 06199ee..0000000
--- a/neutron/lib/puppet/provider/nova_admin_tenant_id_setter/ini_setting.rb
+++ /dev/null
@@ -1,196 +0,0 @@
-## NB: This must work with Ruby 1.8!
-
-# This providers permits the nova_admin_tenant_id paramter in neutron.conf
-# to be set by providing a nova_admin_tenant_name to the Puppet module and
-# using the Keystone REST API to translate the name into the corresponding
-# UUID.
-#
-# This requires that tenant names be unique.  If there are multiple matches
-# for a given tenant name, this provider will raise an exception.
-
-require 'rubygems'
-require 'net/http'
-require 'net/https'
-require 'json'
-require 'puppet/util/inifile'
-
-class KeystoneError < Puppet::Error
-end
-
-class KeystoneConnectionError < KeystoneError
-end
-
-class KeystoneAPIError < KeystoneError
-end
-
-# Provides common request handling semantics to the other methods in
-# this module.
-#
-# +req+::
-#   An HTTPRequest object
-# +url+::
-#   A parsed URL (returned from URI.parse)
-def neutron_handle_request(req, url)
-    begin
-        # There is issue with ipv6 where address has to be in brackets, this causes the
-        # underlying ruby TCPSocket to fail. Net::HTTP.new will fail without brackets on
-        # joining the ipv6 address with :port or passing brackets to TCPSocket. It was
-        # found that if we use Net::HTTP.start with url.hostname the incriminated code
-        # won't be hit.
-        use_ssl = url.scheme == "https" ? true : false
-        http = Net::HTTP.start(url.hostname, url.port, {:use_ssl => use_ssl})
-        res = http.request(req)
-
-        if res.code != '200'
-            raise KeystoneAPIError, "Received error response from Keystone server at #{url}: #{res.message}"
-        end
-    rescue Errno::ECONNREFUSED => detail
-        raise KeystoneConnectionError, "Failed to connect to Keystone server at #{url}: #{detail}"
-    rescue SocketError => detail
-        raise KeystoneConnectionError, "Failed to connect to Keystone server at #{url}: #{detail}"
-    end
-
-    res
-end
-
-# Authenticates to a Keystone server and obtains an authentication token.
-# It returns a 2-element +[token, authinfo]+, where +token+ is a token
-# suitable for passing to openstack apis in the +X-Auth-Token+ header, and
-# +authinfo+ is the complete response from Keystone, including the service
-# catalog (if available).
-#
-# +auth_url+::
-#   Keystone endpoint URL.  This function assumes API version
-#   2.0 and an administrative endpoint, so this will typically look like
-#   +http://somehost:35357/v2.0+.
-#
-# +username+::
-#   Username for authentication.
-#
-# +password+::
-#   Password for authentication
-#
-# +tenantID+::
-#   Tenant UUID
-#
-# +tenantName+::
-#   Tenant name
-#
-def keystone_v2_authenticate(auth_url,
-                             username,
-                             password,
-                             tenantId=nil,
-                             tenantName=nil)
-
-    post_args = {
-        'auth' => {
-            'passwordCredentials' => {
-                'username' => username,
-                'password' => password
-            },
-        }}
-
-    if tenantId
-        post_args['auth']['tenantId'] = tenantId
-    end
-
-    if tenantName
-        post_args['auth']['tenantName'] = tenantName
-    end
-
-    url = URI.parse("#{auth_url}/tokens")
-    req = Net::HTTP::Post.new url.path
-    req['content-type'] = 'application/json'
-    req.body = post_args.to_json
-
-    res = neutron_handle_request(req, url)
-    data = JSON.parse res.body
-    return data['access']['token']['id']
-end
-
-# Queries a Keystone server to a list of all tenants.
-#
-# +auth_url+::
-#   Keystone endpoint.  See the notes for +auth_url+ in
-#   +keystone_v2_authenticate+.
-#
-# +token+::
-#   A Keystone token that will be passed in requests as the value of the
-#   +X-Auth-Token+ header.
-#
-def keystone_v2_tenants(auth_url,
-                        token)
-
-    url = URI.parse("#{auth_url}/tenants")
-    req = Net::HTTP::Get.new url.path
-    req['content-type'] = 'application/json'
-    req['x-auth-token'] = token
-
-    res = neutron_handle_request(req, url)
-    data = JSON.parse res.body
-    data['tenants']
-end
-
-Puppet::Type.type(:nova_admin_tenant_id_setter).provide(:ruby) do
-    @tenant_id = nil
-
-    def authenticate
-        keystone_v2_authenticate(
-          @resource[:auth_url],
-          @resource[:auth_username],
-          @resource[:auth_password],
-          nil,
-          @resource[:auth_tenant_name])
-    end
-
-    def find_tenant_by_name (token)
-        tenants  = keystone_v2_tenants(
-            @resource[:auth_url],
-            token)
-
-        tenants.select{|tenant| tenant['name'] == @resource[:tenant_name]}
-    end
-
-    def exists?
-      ini_file  = Puppet::Util::IniConfig::File.new
-      ini_file.read("/etc/neutron/neutron.conf")
-      ini_file['DEFAULT'] && ini_file['DEFAULT']['nova_admin_tenant_id'] && ini_file['DEFAULT']['nova_admin_tenant_id'] == tenant_id
-    end
-
-    def create
-        config
-    end
-
-    def tenant_id
-      @tenant_id ||= get_tenant_id
-    end
-
-    # This looks for the tenant specified by the 'tenant_name' parameter to
-    # the resource and returns the corresponding UUID if there is a single
-    # match.
-    #
-    # Raises a KeystoneAPIError if:
-    #
-    # - There are multiple matches, or
-    # - There are zero matches
-    def get_tenant_id
-        token = authenticate
-        tenants = find_tenant_by_name(token)
-
-        if tenants.length == 1
-            return tenants[0]['id']
-        elsif tenants.length > 1
-            raise KeystoneAPIError, 'Found multiple matches for tenant name'
-        else
-            raise KeystoneAPIError, 'Unable to find matching tenant'
-        end
-    end
-
-    def config
-        Puppet::Type.type(:neutron_config).new(
-            {:name => 'DEFAULT/nova_admin_tenant_id', :value => "#{tenant_id}"}
-        ).create
-    end
-
-end
-
diff --git a/neutron/lib/puppet/type/nova_admin_tenant_id_setter.rb b/neutron/lib/puppet/type/nova_admin_tenant_id_setter.rb
deleted file mode 100644
index d79e86c..0000000
--- a/neutron/lib/puppet/type/nova_admin_tenant_id_setter.rb
+++ /dev/null
@@ -1,32 +0,0 @@
-Puppet::Type.newtype(:nova_admin_tenant_id_setter) do
-
-    ensurable
-
-    newparam(:name, :namevar => true) do
-        desc 'The name of the setting to update'
-    end
-
-    newparam(:tenant_name) do
-        desc 'The nova admin tenant name'
-    end
-
-    newparam(:auth_url) do
-        desc 'The Keystone endpoint URL'
-        defaultto 'http://localhost:35357/v2.0'
-    end
-
-    newparam(:auth_username) do
-        desc 'Username with which to authenticate'
-        defaultto 'admin'
-    end
-
-    newparam(:auth_password) do
-        desc 'Password with which to authenticate'
-    end
-
-    newparam(:auth_tenant_name) do
-        desc 'Tenant name with which to authenticate'
-        defaultto 'admin'
-    end
-end
-
diff --git a/neutron/manifests/init.pp b/neutron/manifests/init.pp
index 4d576f9..d638909 100644
--- a/neutron/manifests/init.pp
+++ b/neutron/manifests/init.pp
@@ -321,8 +321,6 @@ class neutron (
 
   include ::neutron::params
 
-  Package['neutron'] -> Nova_Admin_Tenant_Id_Setter<||>
-
   if $use_ssl {
     if !$cert_file {
       fail('The cert_file parameter is required when use_ssl is set to true')
diff --git a/neutron/manifests/keystone/auth.pp b/neutron/manifests/keystone/auth.pp
index 60f8d9d..d7cd7bc 100644
--- a/neutron/manifests/keystone/auth.pp
+++ b/neutron/manifests/keystone/auth.pp
@@ -190,7 +190,6 @@ class neutron::keystone::auth (
 
   if $configure_endpoint {
     Keystone_endpoint["${region}/${real_service_name}"]  ~> Service <| title == 'neutron-server' |>
-    Keystone_endpoint["${region}/${real_service_name}"] -> Nova_admin_tenant_id_setter<||>
   }
 
   if $configure_user_role {
diff --git a/neutron/manifests/server.pp b/neutron/manifests/server.pp
index 8915f5b..ad13f8e 100644
--- a/neutron/manifests/server.pp
+++ b/neutron/manifests/server.pp
@@ -243,7 +243,6 @@ class neutron::server (
   include ::neutron::policy
   require keystone::python
 
-  Nova_admin_tenant_id_setter<||> ~> Service['neutron-server']
   Neutron_config<||>     ~> Service['neutron-server']
   Neutron_api_config<||> ~> Service['neutron-server']
   Class['neutron::policy'] ~> Service['neutron-server']
diff --git a/neutron/manifests/server/notifications.pp b/neutron/manifests/server/notifications.pp
index eef09ee..bedeb28 100644
--- a/neutron/manifests/server/notifications.pp
+++ b/neutron/manifests/server/notifications.pp
@@ -109,13 +109,8 @@ class neutron::server::notifications (
       'DEFAULT/nova_admin_tenant_id': value => $nova_admin_tenant_id;
     }
   } else {
-    nova_admin_tenant_id_setter {'nova_admin_tenant_id':
-      ensure           => present,
-      tenant_name      => $nova_admin_tenant_name,
-      auth_url         => $nova_admin_auth_url,
-      auth_username    => $nova_admin_username,
-      auth_password    => $nova_admin_password,
-      auth_tenant_name => $nova_admin_tenant_name,
+    neutron_config {
+      'DEFAULT/nova_admin_tenant_name': value => $nova_admin_tenant_name;
     }
   }
 }
diff --git a/neutron/spec/classes/neutron_server_notifications_spec.rb b/neutron/spec/classes/neutron_server_notifications_spec.rb
index 8497f64..5a26f1c 100644
--- a/neutron/spec/classes/neutron_server_notifications_spec.rb
+++ b/neutron/spec/classes/neutron_server_notifications_spec.rb
@@ -118,13 +118,7 @@ describe 'neutron::server::notifications' do
                 })
             end
             it 'should configure nova admin tenant id' do
-              is_expected.to contain_nova_admin_tenant_id_setter('nova_admin_tenant_id').with(
-                :ensure           => 'present',
-                :tenant_name      => 'services',
-                :auth_url         => 'http://127.0.0.1:35357/v2.0',
-                :auth_password    => 'secrete',
-                :auth_tenant_name => 'services'
-              )
+              is_expected.to contain_neutron_config('DEFAULT/nova_admin_tenant_name').with_value('services')
             end
         end
     end
diff --git a/neutron/spec/unit/provider/nova_admin_tenant_id_setter/neutron_spec.rb b/neutron/spec/unit/provider/nova_admin_tenant_id_setter/neutron_spec.rb
deleted file mode 100644
index 06e745e..0000000
--- a/neutron/spec/unit/provider/nova_admin_tenant_id_setter/neutron_spec.rb
+++ /dev/null
@@ -1,212 +0,0 @@
-require 'spec_helper'
-require 'puppet'
-require 'puppet/type/nova_admin_tenant_id_setter'
-
-provider_class = Puppet::Type.type(:nova_admin_tenant_id_setter).provider(:ruby)
-
-# used to simulate an authentication response from Keystone
-# (POST v2.0/tokens)
-auth_response = {
-    'access' => {
-        'token' => {
-            'id' => 'TOKEN',
-        }
-    }
-}
-
-# used to simulate a response to GET v2.0/tenants
-tenants_response = {
-    'tenants' => [
-        {
-            'name' => 'services',
-            'id'   => 'UUID_SERVICES'
-        },
-        {
-            'name' => 'multiple_matches_tenant',
-            'id'   => 'UUID1'
-        },
-        {
-            'name' => 'multiple_matches_tenant',
-            'id'   => 'UUID2'
-        },
-    ]
-}
-
-# Stub for openstack_config resource
-Puppet::Type.newtype(:openstack_config) do
-end
-
-# Stub for openstack_config provider
-Puppet::Type.newtype(:openstack_config).provide(:ini_setting) do
-    def create
-    end
-end
-
-describe 'Puppet::Type.type(:nova_admin_tenant_id_setter)' do
-    let :params do
-        {
-            :name             => 'nova_admin_tenant_id',
-            :tenant_name      => 'services',
-            :auth_username    => 'nova',
-            :auth_password    => 'secret',
-            :auth_tenant_name => 'admin',
-            :auth_url         => 'http://127.0.0.1:35357/v2.0',
-        }
-    end
-
-    it 'should have a non-nil provider' do
-        expect(provider_class).not_to be_nil
-    end
-
-    context 'when url is correct' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").
-                to_return(:status => 200,
-                          :body => auth_response.to_json,
-                          :headers => {})
-            stub_request(:get, "http://127.0.0.1:35357/v2.0/tenants").
-                with(:headers => {'X-Auth-Token'=>'TOKEN'}).
-                to_return(:status => 200,
-                          :body => tenants_response.to_json,
-                          :headers => {})
-        end
-
-        it 'should create a resource' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect(provider.create).to be_nil
-        end
-
-        context 'when tenant id already set' do
-            it 'should create a resource, with exists? true' do
-                mock = { 'DEFAULT' => { 'nova_admin_tenant_id' => 'UUID_SERVICES' } }
-                Puppet::Util::IniConfig::File.expects(:new).returns(mock)
-                mock.expects(:read).with('/etc/neutron/neutron.conf')
-
-                resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-                provider = provider_class.new(resource)
-                expect(provider.exists?).to be_truthy
-                expect(provider.create).to be_nil
-            end
-        end
-    end
-
-    # What happens if we ask for a tenant that does not exist?
-    context 'when tenant cannot be found' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").
-                to_return(:status => 200,
-                          :body => auth_response.to_json,
-                          :headers => {})
-            stub_request(:get, "http://127.0.0.1:35357/v2.0/tenants").
-                with(:headers => {'X-Auth-Token'=>'TOKEN'}).
-                to_return(:status => 200,
-                          :body => tenants_response.to_json,
-                          :headers => {})
-
-            params.merge!(:tenant_name => 'bad_tenant_name')
-        end
-
-        it 'should receive an api error' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect { provider.create }.to raise_error KeystoneAPIError, /Unable to find matching tenant/
-        end
-    end
-
-    # What happens if we ask for a tenant name that results in multiple
-    # matches?
-    context 'when there are multiple matching tenants' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").
-                to_return(:status => 200,
-                          :body => auth_response.to_json,
-                          :headers => {})
-            stub_request(:get, "http://127.0.0.1:35357/v2.0/tenants").
-                with(:headers => {'X-Auth-Token'=>'TOKEN'}).
-                to_return(:status => 200,
-                          :body => tenants_response.to_json,
-                          :headers => {})
-
-            params.merge!(:tenant_name => 'multiple_matches_tenant')
-        end
-
-        it 'should receive an api error' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect { provider.create }.to raise_error KeystoneAPIError, /Found multiple matches for tenant name/
-        end
-    end
-
-    # What happens if we pass a bad password?
-    context 'when password is incorrect' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").
-                to_return(:status => 401,
-                          :body => auth_response.to_json,
-                          :headers => {})
-        end
-
-        it 'should receive an authentication error' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect { provider.create }.to raise_error KeystoneAPIError
-        end
-    end
-
-    # What happens if the server is not listening?
-    context 'when keystone server is unavailable' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").to_raise Errno::ECONNREFUSED
-        end
-
-        it 'should receive a connection error' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect { provider.create }.to raise_error KeystoneConnectionError
-        end
-    end
-
-    # What happens if we mistype the hostname?
-    context 'when keystone server is unknown' do
-        before :each do
-            stub_request(:post, "http://127.0.0.1:35357/v2.0/tokens").to_raise SocketError, 'getaddrinfo: Name or service not known'
-        end
-
-        it 'should receive a connection error' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect { provider.create }.to raise_error KeystoneConnectionError
-        end
-    end
-
-    context 'when using secure keystone endpoint' do
-        before :each do
-            params.merge!(:auth_url => "https://127.0.0.1:35357/v2.0")
-            stub_request(:post, "https://127.0.0.1:35357/v2.0/tokens").
-                to_return(:status => 200,
-                          :body => auth_response.to_json,
-                          :headers => {})
-            stub_request(:get, "https://127.0.0.1:35357/v2.0/tenants").
-                with(:headers => {'X-Auth-Token'=>'TOKEN'}).
-                to_return(:status => 200,
-                          :body => tenants_response.to_json,
-                          :headers => {})
-        end
-
-        it 'should create a resource' do
-            resource = Puppet::Type::Nova_admin_tenant_id_setter.new(params)
-            provider = provider_class.new(resource)
-            expect(provider.exists?).to be_falsey
-            expect(provider.create).to be_nil
-        end
-    end
-
-end
-
